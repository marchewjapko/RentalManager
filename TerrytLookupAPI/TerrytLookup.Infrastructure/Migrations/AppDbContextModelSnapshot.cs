// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TerrytLookup.Infrastructure.Repositories.DbContext;

#nullable disable

namespace TerrytLookup.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TerrytLookup.Core.Domain.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TerrytNameId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TownId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ValidFromDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TownId");

                    b.ToTable("Streets", (string)null);
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Town", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TerrytId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("ValidFromDate")
                        .HasColumnType("date");

                    b.Property<Guid>("VoivodeshipId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("VoivodeshipId");

                    b.ToTable("Towns", (string)null);
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Voivodeship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TerrytId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("ValidFromDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Voivodeships", (string)null);
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Street", b =>
                {
                    b.HasOne("TerrytLookup.Core.Domain.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("TerrytLookup.Core.Domain.Town", b =>
                {
                    b.HasOne("TerrytLookup.Core.Domain.Voivodeship", "Voivodeship")
                        .WithMany()
                        .HasForeignKey("VoivodeshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voivodeship");
                });
#pragma warning restore 612, 618
        }
    }
}
